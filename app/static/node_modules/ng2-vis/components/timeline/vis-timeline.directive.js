"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var vis_timeline_service_1 = require("./vis-timeline.service");
var index_1 = require("./index");
/**
 * Use this directive with a div container to show timeline data.
 *
 * @export
 * @class VisTimelineDirective
 * @implements {OnInit}
 * @implements {OnDestroy}
 * @implements {OnChanges}
 */
var VisTimelineDirective = (function () {
    /**
     * Creates an instance of VisTimelineDirective.
     *
     * @param {ElementRef} elementRef The HTML element reference.
     * @param {VisTimelineService} visTimelineService The VisTimelineService.
     *
     * @memberOf VisTimelineDirective
     */
    function VisTimelineDirective(elementRef, visTimelineService) {
        this.elementRef = elementRef;
        this.visTimelineService = visTimelineService;
        /**
         * This event will be raised when the timline is initialized.
         * At this point of time the timeline is successfully registered
         * with the VisNetworkService and you can register to events.
         * The event data is the name of the timeline as a string.
         *
         * @type {EventEmitter<any>}
         * @memberOf VisTimelineDirective
         */
        this.initialized = new core_1.EventEmitter();
        this.isInitialized = false;
        this.visTimelineContainer = elementRef.nativeElement;
    }
    /**
     * Create the timeline when at least visNetwork and visNetworkData
     * are defined.
     *
     * @memberOf VisTimelineDirective
     */
    VisTimelineDirective.prototype.ngOnInit = function () {
        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {
            this.createTimeline();
        }
    };
    /**
     * Update the timeline data, groups or options on reference changes to
     * the visTimelineItems, visTimelineGroups or visTimelineOptions properties.
     *
     * @param {{[propName: string]: SimpleChange}} changes
     *
     * @memberOf VisTimelineDirective
     */
    VisTimelineDirective.prototype.ngOnChanges = function (changes) {
        if (!this.isInitialized && this.visTimeline && this.visTimelineItems) {
            this.createTimeline();
        }
        for (var propertyName in changes) {
            if (changes.hasOwnProperty(propertyName)) {
                var change = changes[propertyName];
                if (!change.isFirstChange()) {
                    if (propertyName === 'visTimelineItems') {
                        this.visTimelineService.setItems(this.visTimeline, changes[propertyName].currentValue);
                    }
                    if (propertyName === 'visTimelineOptions') {
                        this.visTimelineService.setOptions(this.visTimeline, changes[propertyName].currentValue);
                    }
                    if (propertyName === 'visTimelineGroups') {
                        this.visTimelineService.setGroups(this.visTimeline, changes[propertyName].currentValue);
                    }
                }
            }
        }
    };
    /**
     * Calls the destroy function for this timeline instance.
     *
     *
     * @memberOf VisTimelineDirective
     */
    VisTimelineDirective.prototype.ngOnDestroy = function () {
        this.isInitialized = false;
        this.visTimelineService.destroy(this.visTimeline);
    };
    VisTimelineDirective.prototype.createTimeline = function () {
        if (this.visTimelineGroups) {
            this.visTimelineService.createWithItemsAndGroups(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineGroups, this.visTimelineOptions);
        }
        else {
            this.visTimelineService.createWithItems(this.visTimeline, this.visTimelineContainer, this.visTimelineItems, this.visTimelineOptions);
        }
        this.isInitialized = true;
        this.initialized.emit(this.visTimeline);
    };
    return VisTimelineDirective;
}());
__decorate([
    core_1.Input('visTimeline'),
    __metadata("design:type", String)
], VisTimelineDirective.prototype, "visTimeline", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", index_1.VisTimelineItems)
], VisTimelineDirective.prototype, "visTimelineItems", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", index_1.VisTimelineGroups)
], VisTimelineDirective.prototype, "visTimelineGroups", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], VisTimelineDirective.prototype, "visTimelineOptions", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], VisTimelineDirective.prototype, "initialized", void 0);
VisTimelineDirective = __decorate([
    core_1.Directive({
        selector: '[visTimeline]',
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, vis_timeline_service_1.VisTimelineService])
], VisTimelineDirective);
exports.VisTimelineDirective = VisTimelineDirective;
